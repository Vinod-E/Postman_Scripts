{
	"info": {
		"_postman_id": "4cfa5448-c5a6-59a6-2427-27348c76e96f",
		"name": "AUTOMATION_SCRIPTS",
		"description": "AUTOMATION_SCRIPTS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "sanity",
			"item": [
				{
					"name": "loginresponsetime",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ensure healthy response code",
									"var status_code = pm.variables.get(\"status\");",
									"tests['*** S T A T U S - C O D E ***  ==>  ' + status_code] = responseCode.code === status_code;",
									"",
									"// ensure APP NODE",
									"// var app_node = pm.variables.get(\"app_node\");",
									"// tests['*** A P P - N O D E ***  ==>  ' + pm.response.headers.get('X-APP_NODE')",
									"// ] = pm.response.headers.get('X-APP_NODE') === app_node ;",
									"",
									"//tests based on reponse",
									"if (pm.response.responseTime <= 200) {",
									"    pm.test(`*** R E S P O N S E - T I M E - B E L O W ***  ==>  ${pm.response.responseTime} ms`, () => {",
									"        pm.expect(pm.response.responseTime).to.be.below(200);",
									"    })",
									"}",
									"else if (pm.response.responseTime >= 200) {",
									"    pm.test(`*** R E S P O N S E - T I M E - A B O V E***  ==>  ${pm.response.responseTime} ms`, () => {",
									"        pm.expect(pm.response.responseTime).to.be.above(200);",
									"    })",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"LoginName\": \"{{Username}}\",\n    \"Password\": \"{{Password}}\",\n    \"UserName\": \"{{Username}}\",\n    \"TenantAlias\": \"{{Tenant}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}py/common/user/login_user/",
							"host": [
								"{{domain}}py"
							],
							"path": [
								"common",
								"user",
								"login_user",
								""
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "regression",
			"item": [
				{
					"name": "logindiffExceldataset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ensure healthy response code",
									"var status_code = pm.variables.get(\"status\");",
									"tests['*** S T A T U S - C O D E ***  ===>  ' + status_code] = responseCode.code === status_code;",
									"",
									"// parse the response object",
									"var response = JSON.parse(responseBody);",
									"var message = pm.variables.get(\"message\")",
									"var id = pm.variables.get(\"user_id\")",
									"",
									"//tests based on reponse",
									"if (response.UserId === id) {",
									"    pm.test(`*** L O G I N - W I T H ***  ==>  ${response.UserId}`, () => {",
									"        pm.expect(response.UserId).to.equal(id)",
									"        pm.expect(response.IsLoginFailed).to.equal(false)",
									"    })",
									"}",
									"else if (response.error.errorDescription === message) {",
									"    pm.test(`*** E R R O R ***  ==>  ${response.error.errorDescription}`, () => {",
									"        pm.expect(response.error.errorDescription).to.equal(message)",
									"    })",
									"}",
									"else {",
									"    pm.test(`*** U N K N O W N - E R R O R ***`)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"LoginName\": \"{{Username}}\",\n    \"Password\": \"{{Password}}\",\n    \"UserName\": \"{{Username}}\",\n    \"TenantAlias\": \"{{Tenant}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}py/common/user/login_user/",
							"host": [
								"{{domain}}py"
							],
							"path": [
								"common",
								"user",
								"login_user",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "app_node_check",
			"item": [
				{
					"name": "APP NODE CHECK",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// adding extra headers to request",
									"pm.request.headers.upsert({key: \"APP-NAME\", value: \"crpo\"})",
									"",
									"//Varaible assignment",
									"var get_request = pm.variables.get(\"request\")",
									"var modify_request = ''",
									"var id = '';",
									"",
									"// common function for different servers",
									"function updateReq(id) {",
									"    var re = get_request.toString();",
									"    if(re.includes(\"{{job_id}}\")){",
									"        modify_request = re.replace(\"{{job_id}}\", id);",
									"    }else if(re.includes(\"{{req_id}}\")){",
									"        modify_request = re.replace(\"{{req_id}}\", id);",
									"    }else if(re.includes(\"{{event_id}}\")){",
									"        modify_request = re.replace(\"{{event_id}}\", id);",
									"    }else { modify_request = re}",
									"    return;",
									"}",
									"",
									"//Condition code for environment",
									"if (pm.environment.name === 'amsin') {",
									"    id = pm.variables.get(\"id_qa\")",
									"    updateReq(id);",
									"    //console.log(\"request------\" + modify_request)",
									"}",
									"else if (pm.environment.name === 'betaams'){",
									"    id = pm.variables.get(\"id_beta\")",
									"    updateReq(id);",
									"}",
									"else if (pm.environment.name === 'live') {",
									"    id = pm.variables.get(\"id_prod\");",
									"    updateReq(id);",
									"}",
									"",
									"pm.environment.set(\"modify_request\", modify_request);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ensure APP NODE",
									"var qa_replica_app_node = pm.variables.get(\"qa_write_replica_read_replica\");",
									"var qa_master_app_node = pm.variables.get(\"qa_write_master_read_master\");",
									"var live_replica_app_node = pm.variables.get(\"live_write_master_read_master\");",
									"var live_master_app_node = pm.variables.get(\"live_write_master_read_master\");",
									"var app_node = pm.response.headers.get('X-APP_NODE')",
									"",
									"//tests based on reponse",
									"if (app_node === qa_replica_app_node){",
									"    pm.test(`*** A P P - N O D E *** ==> ${app_node}`,",
									"    () => {app_node === qa_replica_app_node",
									"        // console.log(qa_replica_app_node)",
									"    })",
									"}",
									"else if (app_node === qa_master_app_node){",
									"    pm.test(`*** A P P - N O D E *** ==> ${app_node}`,",
									"    () => {app_node === qa_master_app_node",
									"        // console.log(qa_master_app_node)",
									"    })",
									"}",
									"else if (app_node === live_replica_app_node){",
									"    pm.test(`*** A P P - N O D E *** ==> ${app_node}`,",
									"    () => {app_node === live_replica_app_node",
									"        // console.log(qa_master_app_node)",
									"    })",
									"}",
									"else if (app_node === live_master_app_node){",
									"    pm.test(`*** A P P - N O D E *** ==> ${app_node}`,",
									"    () => {app_node === live_master_app_node",
									"        // console.log(qa_master_app_node)",
									"    })",
									"}",
									"else{",
									"    pm.test(`*** U N K N O W N - E R R O R ***`)",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-AUTH-TOKEN",
								"value": "{{token}}",
								"type": "text"
							},
							{
								"key": "X-APPLMA",
								"value": "true",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modify_request}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{url}}",
							"host": [
								"{{domain}}{{url}}"
							]
						},
						"description": "APP NODE CHECKING"
					},
					"response": []
				}
			]
		},
		{
			"name": "py3_verification",
			"item": [
				{
					"name": "PY3 SERVER CHECK",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// parse the response object",
									"var new_env = pm.response.headers.get('X-IS-NEW_ENV');",
									"var app_name = pm.request.headers.get('APP-NAME');",
									"",
									"tests['*** A P P - N A M E *** == Expecting(CRPO) == ' + pm.request.headers.get('APP-NAME')] = pm.request.headers.get('APP-NAME') === 'crpo'",
									"",
									"tests['*** X - I S - N E W _ E N V *** == Expecting(True) == ' + pm.response.headers.get('X-IS-NEW_ENV')] = pm.response.headers.get('X-IS-NEW_ENV') === 'True'"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// adding extra headers to request",
									"pm.request.headers.upsert({key: \"APP-NAME\", value: \"crpo\"})",
									"",
									"//Varaible assignment",
									"var get_request = pm.variables.get(\"request\")",
									"var modify_request = ''",
									"var id = '';",
									"",
									"// common function for different servers",
									"function updateReq(id) {",
									"    var re = get_request.toString();",
									"    if(re.includes(\"{{job_id}}\")){",
									"        modify_request = re.replace(\"{{job_id}}\", id);",
									"    }else if(re.includes(\"{{req_id}}\")){",
									"        modify_request = re.replace(\"{{req_id}}\", id);",
									"    }else if(re.includes(\"{{event_id}}\")){",
									"        modify_request = re.replace(\"{{event_id}}\", id);",
									"    }else { modify_request = re}",
									"    return;",
									"}",
									"",
									"//Condition code for environment",
									"if (pm.environment.name === 'amsin') {",
									"    id = pm.variables.get(\"id_qa\")",
									"    updateReq(id);",
									"    //console.log(\"request------\" + modify_request)",
									"}",
									"else if (pm.environment.name === 'betaams'){",
									"    id = pm.variables.get(\"id_beta\")",
									"    updateReq(id);",
									"}",
									"else if (pm.environment.name === 'live') {",
									"    id = pm.variables.get(\"id_prod\");",
									"    updateReq(id);",
									"}",
									"",
									"pm.environment.set(\"modify_request\", modify_request);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-AUTH-TOKEN",
								"type": "text",
								"value": "{{token}}"
							},
							{
								"key": "X-APPLMA",
								"type": "text",
								"value": "true"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{modify_request}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{url}}",
							"host": [
								"{{domain}}{{url}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "APP-NAME / X-IS-ENV verification collection folder set",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.sendRequest({",
					"    url: pm.environment.get(\"domain\") + 'py/common/user/login_user/',",
					"    method: 'POST',",
					"    header: {",
					"        'content-type': 'application/json',",
					"    },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: JSON.stringify({",
					"            \"LoginName\": pm.environment.get(\"Username\"), ",
					"            \"Password\": pm.environment.get(\"Password\"), ",
					"            \"UserName\": pm.environment.get(\"Username\"),",
					"            \"TenantAlias\": pm.environment.get(\"Tenant\")",
					"            })}",
					"}, function (err, res) {",
					"    // console.log(res.json())",
					"    pm.environment.set(\"token\", res.json().Token);",
					"});",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}